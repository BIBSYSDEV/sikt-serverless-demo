AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS

  SAM Template for NVA a Demo Service

Globals:
  Function:
    Timeout: 20
    MemorySize: 1800 # 1 vCPU
    Runtime: java11
    Environment:
      Variables:
        COGNITO_HOST: !Ref CognitoAuthorizationUri
        API_HOST: !Ref ApiDomain
        API_SCHEME: 'https'
    Architectures:
      - arm64
  Api:
    Cors:
      AllowMethods: "'PUT, GET,OPTIONS,DELETE,POST'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  CognitoAuthorizerArn:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: Reference to Cognito UserPool for the stage
    Default: CognitoAuthorizerArn
  CognitoAuthorizationUri:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/NVA/CognitoUri'
  ApiDomain:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Description: The Api domain
    Default: /NVA/ApiDomain
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
    Default: demo
  NvaEventsBucketsName:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: '/NVA/Events/EventsBucketName'
  Suffix:
    Type: String
    Default: ''
    Description: Suffix used for naming resources for feature branches to avoid conflicts.

Conditions:
  WithSuffix: !Not [ !Equals [ !Ref Suffix, '' ] ]

Resources:

  ApiAccessLogGroup:
    Type: AWS::Logs::LogGroup

#==============================ROLES=======================================================================

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole

  DefaultLambdaPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub DefaultLambdaPermissions-${AWS::StackName}
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - lambda:InvokeFunction
            Resource: "*"

  S3AccessPermsisions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub S3AccessPermsisions-${AWS::StackName}
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:ListBucket
              - s3:ListBucketMultipartUploads
              - s3:PutObject
              - s3:PutObjectAcl
            Resource: "*"

  EventsLambdaPermissions:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub EventsLambdaPermissions-${AWS::StackName}
      Roles:
        - !Ref LambdaRole
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - events:*
              - sqs:SendMessage
              - sqs:ReceiveMessage
              - sqs:DeleteMessage
            Resource: "*"

  DemoApi:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApiAccessLogGroup.Arn
        Format: '{ "apiId": "$context.apiId", "requestId": "$context.requestId", "requestTime": "$context.requestTime", "requestTimeEpoch": "$context.requestTimeEpoch", "httpMethod": "$context.httpMethod", "path": "$context.path", "status": "$context.status",  "error.message": "$context.error.message" }'
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        'Fn::Transform':
          Name: AWS::Include
          Parameters:
            Location: ./docs/openapi.yaml

  DemoHttpFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: demo
      Description: Demo Http handler
      Environment:
        Variables:
          EVENTS_BUCKET: !Ref NvaEventsBucketsName
          EVENT_BUS_NAME: !GetAtt InternalBus.Name
          API_HOST: !Ref ApiDomain
          ALLOWED_ORIGIN: '*'
      Events:
        RestEvent:
          Type: Api
          Properties:
            Method: post
            Path: /demo
            RestApiId: !Ref DemoApi
      Handler: no.unit.nva.bergen.DemoHttpHandler::handleRequest
      Role: !GetAtt LambdaRole.Arn

  FirstEventBridgeEventHandler:
    DependsOn: EventsLambdaPermissions
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: demo
      Handler: no.unit.nva.bergen.FirstEventBridgeHandler::handleRequest
      Runtime: java11
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EVENTS_BUCKET: !Ref NvaEventsBucketsName
          EVENT_BUS_NAME: !GetAtt InternalBus.Name
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !GetAtt InternalBus.Name
            Pattern:
              detail:
                  topic: [ "Demo.Message.Http" ]
      EventInvokeConfig:
        DestinationConfig:
          OnSuccess:
            Type: EventBridge
            Destination: !GetAtt InternalBus.Arn

  SecondEventBridgeEventHandler:
    DependsOn: EventsLambdaPermissions
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: demo
      Handler: no.unit.nva.bergen.SecondEventBridgeHandler::handleRequest
      Runtime: java11
      Role: !GetAtt LambdaRole.Arn
      Environment:
        Variables:
          EVENTS_BUCKET: !Ref NvaEventsBucketsName
          EVENT_BUS_NAME: !GetAtt InternalBus.Name
      Events:
        EventBridgeEvent:
          Type: EventBridgeRule
          Properties:
            EventBusName: !GetAtt InternalBus.Name
            Pattern:
              detail:
                responsePayload:
                  topic: [ "Demo.Message.Capitalize" ]



  #============================ Deploy API ============================================================================#
  # This solves the problem described here:
  # https://stackoverflow.com/questions/41423439/cloudformation-doesnt-deploy-to-api-gateway-stages-on-update
  #====================================================================================================================#

  ApiGatewayCreateDeploymentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: ApiGatewayAdmin
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - apigateway:POST
                Resource: !Sub 'arn:aws:apigateway:${AWS::Region}::/restapis/${DemoApi}/deployments'

  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html
  ApiGatewayCreateDeploymentLambda:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Timeout: 30
      Role: !GetAtt ApiGatewayCreateDeploymentLambdaRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import json, boto3
          import cfnresponse
          client = boto3.client('apigateway')

          def lambda_handler(event, context):
            responseData = {}
            responseStatus = cfnresponse.SUCCESS
            if event['RequestType'] == 'Update':
              try:
                properties = event['ResourceProperties']
                response = client.create_deployment(
                  restApiId=properties['RestApiId'],
                  stageName=properties['StageName'],
                  description='Deployed from Custom Resource'
                )
              except:
                responseStatus = cfnresponse.FAILED

            cfnresponse.send(event, context, responseStatus, responseData)

  ApiGatewayCreateDeploymentCustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt ApiGatewayCreateDeploymentLambda.Arn
      RestApiId: !Ref DemoApi
      StageName: !Ref DemoApi.Stage
      Timestamp: '${BUILD_TIMESTAMP}'
      AuthorizerArn: !Ref CognitoAuthorizerArn

  #=============================Internal Event Bus=============================================================
  InternalBus:
    Type: AWS::Events::EventBus
    Properties:
      Name: !Join [ '',[ 'resource-service-internal-bus',!Ref Suffix ] ]

  #===========================BasePathMappings========================================================

  NvaDemoBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath:
        !If
        - WithSuffix
        - !Sub ${CustomDomainBasePath}-${Suffix}
        - !Sub ${CustomDomainBasePath}
      DomainName: !Ref ApiDomain
      RestApiId: !Ref DemoApi
      Stage: !Ref DemoApi.Stage


